#ifndef KERNELS_H
#define KERNELS_H
#include <string>

// BuildMyString.com generated code. Please enjoy your string responsibly.
static const std::string AVERAGE_KERNEL = "__kernel void average(\r\n"
"	__read_only		image2d_t	input, \r\n"
"	__write_only	image2d_t	output, \r\n"
"					sampler_t	sampler,\r\n"
"					int			radius,\r\n"
"					float		alfa,\r\n"
"					float		beta,\r\n"
"					float		gama\r\n"
"	)\r\n"
"{\r\n"
"	const int x = get_global_id(0);\r\n"
"	const int y = get_global_id(1);\r\n"
"	const float4 ALFA = alfa;\r\n"
"	const float4 BETA = beta;\r\n"
"	const float4 GAMA = gama;\r\n"
"	float4 sum = 0.0f;\r\n"
"	int2 position;\r\n"
"	\r\n"
"	for (int row = -radius; row <= radius; row++) {\r\n"
"		position.y = y + row;\r\n"
"		for (int column = -radius; column <= radius; column++) {\r\n"
"			position.x = x + column;\r\n"
"			sum += convert_float4(read_imageui(input, sampler, position));\r\n"
"		}\r\n"
"	}\r\n"
"	sum = sum / ((radius * 2 + 1)*(radius * 2 + 1));\r\n"
"	position.x = x;\r\n"
"	position.y = y;\r\n"
"	const uint4 original = read_imageui(input, sampler, position);\r\n"
"	const uint4 sharp = convert_uint4(convert_float4(original) * ALFA + sum * BETA + GAMA);\r\n"
"	const uint4 delta = sharp - original;\r\n"
"	const uint4 blur = original - delta;\r\n"
"	// not missing anything here... to be filled when loading source\r\n"
"	write_imageui(output, position, );\r\n"
"}\r\n";


// BuildMyString.com generated code. Please enjoy your string responsibly.
static const std::string  GAUSSIAN_KERNEL= "__kernel void gaussian(\r\n"
"	__read_only		image2d_t	input, \r\n"
"	__write_only	image2d_t	output, \r\n"
"					sampler_t	sampler,\r\n"
"	__constant		float*		grid, \r\n"
"					int			radius,\r\n"
"					float		alfa,\r\n"
"					float		beta,\r\n"
"					float		gama\r\n"
"	)\r\n"
"{\r\n"
"	const int x = get_global_id(0);\r\n"
"	const int y = get_global_id(1);\r\n"
"	const float4 ALFA = alfa;\r\n"
"	const float4 BETA = beta;\r\n"
"	const float4 GAMA = gama;\r\n"
"	uint index = 0;\r\n"
"	float4 sum = 0.0f;\r\n"
"	int2 position;\r\n"
"	\r\n"
"	for (int row = -radius; row <= radius; row++) {\r\n"
"		position.y = y + row;\r\n"
"		for (int column = -radius; column <= radius; column++) {\r\n"
"			position.x = x + column;\r\n"
"			sum += convert_float4(read_imageui(input, sampler, position)) * grid[index++];\r\n"
"		}\r\n"
"	}\r\n"
"	position.x = x;\r\n"
"	position.y = y;\r\n"
"	sum = sum / ((radius * 2 + 1)*(radius * 2 + 1));\r\n"
"	const uint4 original = read_imageui(input, sampler, position);\r\n"
"	const uint4 sharp = convert_uint4(convert_float4(original) * ALFA + sum * BETA + GAMA);\r\n"
"	const uint4 delta = sharp - original;\r\n"
"	const uint4 blur = original - delta;\r\n"
"	// not missing anything here... to be filled when loading source\r\n"
"	write_imageui(output, position, );\r\n"
"}\r\n";

#endif // !KERNELS_H

